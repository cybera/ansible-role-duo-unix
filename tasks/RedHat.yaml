---
# RedHat tasks file for ansible-role-duo-unix/

- name: "Install required packages (RHEL - yum)"
  ansible.builtin.yum:
    name: "{{ item }}"
    state: present
  with_items: "{{ packages }}"
  when: ansible_facts['distribution_major_version'] <= '7'

- name: "Install required packages (RHEL - dnf)"
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
  with_items: "{{ packages }}"
  when: ansible_facts['distribution_major_version'] >= '8'

- name: "Import Duo Security Repository Key (RedHat)"
  ansible.builtin.rpm_key:
    key: /tmp/DUO-GPG-PUBLIC-KEY.asc
    state: present

- name: "Check if host is registered to a Spacewalk server (CentOS)"
  ansible.builtin.stat:
    path: /etc/sysconfig/rhn/systemid
  register: systemid
  when:
    - ansible_facts['distribution'] == 'CentOS'
    - '"rhncfg-client" in ansible_facts.packages'

- name: "Check if Duo Security Repository is added via Spacewalk (CentOS)"
  ansible.builtin.shell: rhn-channel --list | grep -i "duo"
  register: repo
  when:
    - ansible_facts['distribution'] == 'CentOS'
    - systemid.stat.exists

- name: "Create Duo Security Repository (RedHat)"
  ansible.builtin.yum_repository:
    name: duosecurity
    description: "Duo Security Repository"
    baseurl: "https://pkg.duosecurity.com/{{ ansible_distribution }}/$releasever/$basearch"
    enabled: yes
    gpgcheck: no
    state: present
  when:
    - ansible_facts['distribution'] == 'RedHat'
  #when: not systemid.stat.exists or repo.rc != 0

#- name: "Install duo_unix package (RHEL - yum)"
#  ansible.builtin.yum:
#    name: "duo_unix"
#    state: present
#  when: ansible_facts['distribution_major_version'] <= '7'

#- name: "Install duo_unix package (RHEL - dnf)"
#  ansible.builtin.dnf:
#    name: "duo_unix"
#    state: present
#  when: ansible_facts['distribution_major_version'] >= '8'

#- name: "Deploy pam_duo.conf Template (RedHat)"
#  ansible.builtin.template:
#    src: pam_duo.j2
#    dest: /etc/duo/pam_duo.conf
#    force: yes

#- name: "Set auth pam_unix.so to required in common_auth (Debian)"
#  community.general.pamd:
#    name: common_auth
#    type: auth
#    control: '[success=1 default=ignore]'
#    module_path: pam_unix.so
#    new_control: requisite
#    backup: true
#  when:
#    - ansible_facts['os_family'] == 'Debian'

#- name: "Add auth pam_duo.so to common_auth (Debian)"
#  community.general.pamd:
#    name: common_auth
#    type: auth
#    control: requisite
#    module_path: pam_unix.so
#    new_type: auth
#    new_control: '[success=1 default=ignore]'
#    new_module_path: pam_duo.so
#    state: after
#  when:
#    - ansible_facts['os_family'] == 'Debian'

#- name: "Disable @include common-auth statement in sshd (Debian)"
#  ansible.builtin.lineinfile:
#    path: /etc/pam.d/sshd
#    search_string: "@include common-auth"
#    line: "#@include common-auth"
#    backup: true
#  when:
#    - ansible_facts['os_family'] == 'Debian'

#- name: "Insert pam_duo.so statement in sshd (Debian)"
#  ansible.builtin.lineinfile:
#    path: /etc/pam.d/sshd
#    insertafter: "^#@include common-auth"
#    line: "auth  [success=1 default=ignore] pam_duo.so"
#  when:
#    - ansible_facts['os_family'] == 'Debian'

#- name: "Add auth pam_deny.so to ssh (Debian)"
#  community.general.pamd:
#    name: ssh
#    type: auth
#    control: '[success=1 default=ignore]'
#    module_path: pam_duo.so
#    new_type: auth
#    new_control: requisite
#    new_module_path: pam_deny.so
#    state: after
#  when:
#    - ansible_facts['os_family'] == 'Debian'

#- name: "Add auth pam_permit.so to ssh (Debian)"
#  community.general.pamd:
#    name: ssh
#    type: auth
#    control: requisite
#    module_path: pam_deny.so
#    new_type: auth
#    new_control: required
#    new_module_path: pam_permit.so
#    state: after
#  when:
#    - ansible_facts['os_family'] == 'Debian'

#- name: "Add auth pam_env.so to sshd"
#  community.general.pamd:
#    name: sshd
#    type: auth
#    control: substack
#    module_path: password-auth
#    new_type: auth
#    new_control: required
#    new_module_path: pam_env.so
#    state: after

#- name: "Add auth pam_duo.so to sshd"
#  community.general.pamd:
#    name: sshd
#    type: auth
#    control: required
#    module_path: pam_env.so
#    new_type: auth
#    new_control: sufficient
#    new_module_path: pam_duo.so
#    state: after

#- name: "Add auth pam_deny.so to sshd"
#  community.general.pamd:
#    name: sshd
#    type: auth
#    control: sufficient
#    module_path: pam_duo.so
#    new_type: auth
#    new_control: required
#    new_module_path: pam_deny.so
#    state: after

#- name: "Disable substack password-auth to sshd"
#  community.general.pamd:
#    name: sshd
#    type: auth
#    control: substack
#    module_path: password-auth
#    state: absent

- name: "Update SSH configuration (RedHat - 8.2 and earlier)"
  ansible.builtin.lineinfile:
    dest: "{{ sshd_config }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: 'sshd -T -f %s'
    mode: 0600
    backup: yes
  with_items:
    - regexp: '(^UsePAM .*)'
      line: 'UsePAM yes'
    - regexp: '(^ChallengeResponseAuthentication .*)'
      line: 'ChallengeResponseAuthentication yes'
    - regexp: '(^UseDNS .*)'
      line: 'UseDNS no'
  when: openssh_version <= '8.2'

- name: "Comment out ChallengeResponseAuthentication from SSH configuration (RedHat - 8.7 and later)"
  ansible.builtin.lineinfile:
    path: "{{ sshd_config }}"
    regexp: '(^ChallengeResponseAuthentication .*)'
    line: '# \1'
    mode: 0600
    backup: yes
    state: present
    validate: 'sshd -T -f %s'
  when: openssh_version >= '8.7'

- name: "Update SSH configuration (Debian - 8.7 and later)"
  ansible.builtin.lineinfile:
    dest: "{{ sshd_config }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: 'sshd -T -f %s'
  with_items:
    - regexp: '(^UsePAM .*)'
      line: 'UsePAM yes'
    - regexp: '(^KbdInteractiveAuthentication .*)'
      line: 'KbdInteractiveAuthentication yes'
    - regexp: '(^UseDNS .*)'
      line: 'UseDNS no'
  when: openssh_version >= '8.7'

#- name: "Restart SSH Daemon (Debian)"
#  ansible.builtin.service:
#    name: "{{ ssh_daemon }}"
#    state: restarted
